# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YKQHJNt6LqBlrA3Dap2QasqZrWPHNDFR
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
import io

"""Let us upload our Dataset and start working on it"""

from google.colab import files
dataset = files.upload()

"""Read it in pandas frame format making it easier to work on it"""

data = pd.read_csv(io.BytesIO(dataset['IRIS Flower (1).csv']))

print(data)

"""First we will check the dataset

Let us check if any entries are 0 or not.
"""

data.isnull().sum()

"""Let us check if we have any duplicate datasets or not, if yes we can drop them as they are redundant."""

data.drop_duplicates(inplace=True)

data.shape

"""Looks like we had 2 duplicates, which was dropped.

"""

species=data['species'].value_counts()

species

sepal_l=data['sepal_length'].value_counts()

sepal_l

"""No need to check other rows value counts.

Let us plot and check the species
"""

plt.figure(figsize=(4,4))
species.plot(kind='bar')
plt.title('Species')
plt.legend(loc='upper left', labels=species.index)
plt.show()

"""We can do better and plot a pie chart"""

plt.figure(figsize=(4,4))
species.plot(kind='pie')
plt.title('Species')
plt.legend(loc='upper left', labels=species.index)
plt.show()

"""Now let us train our model, based on the data we have collected

"""

x=data.drop('species',axis=1)

y=data['species']

"""Now that we have seperated our training input and output, let us split them and train our model

"""

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=42)

"""We will use here 2 models to train our dataset and check the accuracy on that."""

model1=LogisticRegression(max_iter=20)

model1.fit(x_train,y_train)

y_predict=model1.predict(x_test)

print(y_predict)

acc=accuracy_score(y_predict,y_test)
print(acc)

"""Let us use our model 2

"""

model2=KNeighborsClassifier(n_neighbors=3)

model2.fit(x_train,y_train)

y_predict2=model2.predict(x_test)

acc1=accuracy_score(y_predict2,y_test)
print(acc1)

import numpy as np
if acc > acc1:
  model = model1
else:
  model = model2
data_point = np.array([[5.5, 3.8, 1.7, 0.4]])
predicted_species = model.predict(data_point)
print(predicted_species)